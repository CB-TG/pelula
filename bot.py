# bot.py
import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from tzlocal import get_localzone
from zoneinfo import ZoneInfo

from database import (
    init_db,
    set_reminder_time,
    get_reminder_time,
    log_pill,
    get_logs_for_month,
    get_user_timings,
    update_timing,
    create_new_pack,
    decrement_pill
)
from scheduler import send_pill_reminder, send_check_message, cancel_all_jobs

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ dp.storage)
user_check_data = {}

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8348451136:AAFZ9C49lELJ97U-3IvMMPsT_-CsFPwbkjs"  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!
TIMEZONE = ZoneInfo("Europe/Moscow")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler_global = AsyncIOScheduler(timezone=TIMEZONE)

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    waiting_for_time = State()

class TimingForm(StatesGroup):
    waiting_for_input = State()

class NewPackForm(StatesGroup):  # ‚Üê –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_count = State()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def parse_time(time_str: str) -> Optional[datetime.time]:
    match = re.match(r'^([0-2]?[0-9]):([0-5][0-9])$', time_str.strip())
    if not match:
        return None
    h, m = int(match.group(1)), int(match.group(2))
    if h > 23:
        return None
    return datetime.strptime(f"{h:02d}:{m:02d}", "%H:%M").time()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç–∞–±–ª–µ—Ç–∫–µ? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
    await state.set_state(Form.waiting_for_time)

@dp.message(Form.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    time_obj = parse_time(message.text)
    if not time_obj:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: —á—á:–º–º")
        return

    user_id = message.from_user.id
    time_str = time_obj.strftime("%H:%M")
    await set_reminder_time(user_id, time_str)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in scheduler_global.get_jobs():
        if job.kwargs.get("user_id") == user_id:
            job.remove()

    # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    scheduler_global.add_job(
        send_pill_reminder,
        'cron',
        hour=time_obj.hour,
        minute=time_obj.minute,
        kwargs={'bot': bot, 'user_id': user_id},
        id=f"reminder_{user_id}",
        replace_existing=True
    )

    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}.")
    await state.clear()

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –ü—Ä–æ–≤–µ—Ä–∫–∞ = –ù–ü\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞ (–†–µ–∞–∫—Ü–∏—è) = –ù–ü–†\n"
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ - –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ö–Ω–æ–ø–∫–∞ \"–ù–µ—Ç\") = –ù–ü–ù\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–º.–≥–≥\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å\n"
        "‚Ä¢ –ü–æ–∫–∞–∂–∏ —Ç–∞–π–º–∏–Ω–≥–∏\n"
        "‚Ä¢ –ò—Å–ø—Ä–∞–≤—å —Ç–∞–π–º–∏–Ω–≥–∏\n"
        "‚Ä¢ –ù–æ–≤–∞—è –ø–∞—á–∫–∞"
    )

@dp.message(F.text == "–ü–æ–∫–∞–∂–∏ —Ç–∞–π–º–∏–Ω–≥–∏")
async def show_timings(message: Message):
    timings = await get_user_timings(message.from_user.id)
    np_min = timings["np"] // 60
    npr_min = timings["npr"] // 60
    npn_min = timings["npn"] // 60
    await message.answer(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞: {np_min} –º–∏–Ω\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ (–±–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏): {npr_min} –º–∏–Ω\n"
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ—Å–ª–µ ¬´–ù–µ—Ç¬ª): {npn_min} –º–∏–Ω"
    )

@dp.message(F.text == "–ò—Å–ø—Ä–∞–≤—å —Ç–∞–π–º–∏–Ω–≥–∏")
async def edit_timings_start(message: Message, state: FSMContext):
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∏–Ω–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '–ù–ü=1800, –ù–ü–†=300, –ù–ü–ù=1800\n'
        '(–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)'
    )
    await state.set_state(TimingForm.waiting_for_input)

@dp.message(TimingForm.waiting_for_input)
async def process_timing_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    updates = {}
    try:
        for part in text.split(','):
            part = part.strip()
            if '=' not in part:
                continue
            key, val = part.split('=', 1)
            key = key.strip().upper()
            val = int(val.strip())
            if key == "–ù–ü":
                updates["np"] = val
            elif key == "–ù–ü–†":
                updates["npr"] = val
            elif key == "–ù–ü–ù":
                updates["npn"] = val
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á: {key}")

        if not updates:
            raise ValueError("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

        for k, v in updates.items():
            await update_timing(user_id, k, v)

        await message.answer("‚úÖ –¢–∞–π–º–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    finally:
        await state.clear()

@dp.message(F.text.regexp(r"^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\s+(\d{2})\.(\d{2})$"))
async def cmd_schedule(message: Message):
    match = re.match(r"^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\s+(\d{2})\.(\d{2})$", message.text)
    if not match:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 10.25")
        return
    mm, yy = match.group(1), match.group(2)
    month_key = f"{mm}.{yy}"
    logs = await get_logs_for_month(message.from_user.id, month_key)

    if not logs:
        await message.answer(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {month_key}.")
        return

    text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ {month_key}:\n\n"
    for date, status, time_taken in logs:
        if status == "taken":
            text += f"‚úÖ {date} ‚Äî –≤—ã–ø–∏–ª–∞ –≤ {time_taken}\n"
        elif status == "not_needed":
            text += f"‚è∏ {date} ‚Äî –ø–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ\n"
        else:
            text += f"‚ùå {date} ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ\n"
    await message.answer(text)

# === –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ù–æ–≤–∞—è –ø–∞—á–∫–∞ ===
@dp.message(F.text == "–ù–æ–≤–∞—è –ø–∞—á–∫–∞")
async def cmd_new_pack_start(message: Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ –ø–∞—á–∫–µ —Å–µ–π—á–∞—Å?")
    await state.set_state(NewPackForm.waiting_for_count)

@dp.message(NewPackForm.waiting_for_count)
async def cmd_new_pack_set_count(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ç–∞–±–ª–µ—Ç–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12).")
        return

    user_id = message.from_user.id
    await create_new_pack(user_id, count)
    await message.answer(f"‚úÖ –ù–æ–≤–∞—è –ø–∞—á–∫–∞ –Ω–∞ {count} —Ç–∞–±–ª–µ—Ç–æ–∫ –Ω–∞—á–∞—Ç–∞!")
    await state.clear()

# === Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.callback_query(F.data == "yes")
async def cb_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = datetime.now().strftime("%H:%M")
    await log_pill(user_id, "taken", now)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! ‚úÖ")

    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–∞–±–ª–µ—Ç–æ–∫
    new_count = await decrement_pill(user_id)
    if new_count is not None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        await callback.message.answer(f"–¢–∞–±–ª–µ—Ç–æ–∫ –≤ –ø–∞—á–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å: {new_count}")

        if new_count <= 5 and new_count > 0:
            await callback.message.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –î–æ—Ä–æ–≥–∞—è, –ø–∞—á–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫—É–ø–∏ –Ω–æ–≤—É—é –ø–∞—á–∫—É.")
        elif new_count == 0:
            await callback.message.answer("üíä –ü–∞—á–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–ù–æ–≤–∞—è –ø–∞—á–∫–∞¬ª, –∫–æ–≥–¥–∞ –∫—É–ø–∏—à—å!")

    await cancel_all_jobs(user_id)

@dp.callback_query(F.data == "no")
async def cb_no(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text("–ù–∞–ø–æ–º–Ω—é —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    await cancel_all_jobs(user_id)

    timings = await get_user_timings(user_id)
    delay_sec = timings["npn"]  # –ù–ü–ù ‚Äî –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–µ—Ç"

    job_id = f"retry_{user_id}"
    scheduler_global.add_job(
        send_check_message,
        'date',
        run_date=datetime.now() + timedelta(seconds=delay_sec),
        kwargs={'bot': bot, 'user_id': user_id},
        id=job_id,
        replace_existing=True
    )

@dp.callback_query(F.data == "skip_today")
async def cb_skip(callback: CallbackQuery):
    user_id = callback.from_user.id
    await log_pill(user_id, "not_needed")
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –¥–æ –∑–∞–≤—Ç—Ä–∞.")
    await cancel_all_jobs(user_id)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await init_db()
    from scheduler import set_global_scheduler
    set_global_scheduler(scheduler_global)  # ‚Üê —Å–≤—è–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_global.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())